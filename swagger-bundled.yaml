openapi: 3.0.4
info:
  title: Content Flow API
  version: 1.0.0
servers:
  - url: "http://localhost:3000/api"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []
tags:
  - name: Auth
    description: Authentication related endpoints
  - name: Google OAuth
    description: Endpoints related to Google OAuth
  - name: Recovery Password
    description: Endpoints related to password recovery
  - name: Plans
    description: Endpoints related to plans
  - name: Subscription
    description: Endpoints related to subscriptions
paths:
  /register:
    post:
      tags:
        - Auth
      summary: Cria um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: Test user
                email:
                  type: string
                  default: Teste@example.com
                password:
                  type: string
                role:
                  type: integer
                  default: 1
                provider:
                  type: string
                  default: local
      responses:
        "201":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: User created successfully
          description: User created successfully
        "400":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: User already exists
          description: User already exists
  /login:
    post:
      tags:
        - Auth
      summary: Login do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  default: Teste@example.com
                password:
                  type: string
                  default: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: Login successful
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
          description: Login successful
        "401":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: Invalid password
          description: Invalid password
        "404":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: User not found
          description: User not found
  /refresh-access-token:
    post:
      tags:
        - Auth
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  message:
                    type: string
                    default: Token refreshed successfully
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
          description: Token refreshed successfully
        "401":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                    default: Invalid refresh token
          description: Invalid refresh token
  /plans:
    get:
      tags:
        - Plans
      summary: Retrieve all available plans
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      price:
                        type: number
                      trialDays:
                        type: number
                      description:
                        type: number
                      features:
                        type: object
                        properties:
                          users:
                            type: number
                          metrics:
                            type: array
                            default: []
                          support:
                            type: array
                            default: []
                          integrations:
                            type: array
                            default: []
                          contentFormats:
                            type: array
                            default: []
                          postsPerMonth:
                            type: string
                          editorialCalendar:
                            type: array
                            default: []
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
          description: Retrieve all available plans
  /subscriptions:
    post:
      tags:
        - Subscription
      summary: Create a new subscription
      description: |
        Creates a new subscription for a user with a specific plan and payment method.

        **Behavior:**
        - If the user has no subscription, a new one will be created with "pending" status
        - If the user has an "inactive" subscription, it will be reactivated
        - If the user has an "active" or "pending" subscription, it will return a 403 error
        - The priceId must match one of the configured plans (basic, standard, premium)
        - The subscription will be created in Stripe with a trial period based on the plan
        - Returns subscriptionId and clientSecret for payment confirmation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - priceId
                - paymentMethodId
              properties:
                userId:
                  type: string
                  description: ID of the user creating the subscription
                  example: 01234567-89ab-cdef-0123-456789abcdef
                priceId:
                  type: string
                  description: |
                    Stripe price/plan ID. Must be one of the configured values:
                    - basic: For basic plan
                    - standard: For standard plan  
                    - premium: For premium plan
                  example: price_1234567890abcdef
                paymentMethodId:
                  type: string
                  description: Stripe payment method ID (credit card)
                  example: pm_card_visa
      responses:
        "201":
          description: Subscription created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      subscriptionId:
                        type: string
                        description: ID of the subscription created in Stripe
                        example: sub_1234567890abcdef
                      clientSecret:
                        type: string
                        description: Client secret for payment confirmation (can be null)
                        example: pi_1234567890abcdef_secret_1234567890abcdef
                        nullable: true
        "400":
          description: Invalid priceId provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                    example: Invalid priceId provided
        "403":
          description: User already has an active or pending subscription
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                    enum:
                      - You already have an active subscription.
                      - You have a pending subscription. Please wait for it to be processed.
              examples:
                active_subscription:
                  summary: Active subscription
                  value:
                    success: false
                    message: You already have an active subscription.
                pending_subscription:
                  summary: Pending subscription
                  value:
                    success: false
                    message: You have a pending subscription. Please wait for it to be processed.
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal server error (Stripe or other service issues)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
                    description: Specific error message from the service
                    example: Stripe service error
  /create-google-auth-url:
    post:
      tags:
        - Google OAuth
      summary: Create a google url authentication
      responses:
        "200":
          description: Create a google url authentication successfully
          headers:
            Set-Cookie:
              description: OAuth state and nonce cookies
              schema:
                items:
                  type: string
                example:
                  - state=abc123def456; HttpOnly; SameSite=Lax; Secure
                  - nonce=xyz789ghi012; HttpOnly; SameSite=Lax; Secure
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        description: Google OAuth authentication URL
                        example: "https://accounts.google.com/o/oauth2/v2/auth?client_id=..."
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
  /login-oauth-google:
    get:
      tags:
        - Google OAuth
      summary: OAuth Google login endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  default: 123abc
                returnedState:
                  type: string
                  default: state123
                savedState:
                  type: string
                  default: state123
                nonce:
                  type: string
                  default: nonce123
      responses:
        "200":
          description: Login with Google OAuth successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: true
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
  /create-recovery-password-token:
    post:
      tags:
        - Recovery Password
      summary: Initiates the password recovery process
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user requesting password recovery
      description: This endpoint allows users to initiate the password recovery process by providing their email address.
      responses:
        "200":
          description: Password recovery email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password recovery email sent successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
  /recovery-password:
    patch:
      tags:
        - Recovery Password
      description: Recovery Password endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: number
                  description: The recovery token for password reset
                password:
                  type: string
                  description: The new password for the user
      responses:
        "204":
          description: Success - No content
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: null
                properties:
                  success:
                    type: boolean
                    default: false
                  message:
                    type: string
        "401":
          description: The password cannot be the same as the old one
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: The password cannot be the same as the old one
        "404":
          description: Token not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Token not found
